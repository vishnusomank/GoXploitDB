package services

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/vishnusomank/GoXploitDB/models"
)

func unique(stringSlice []string) []string {
	keys := make(map[string]bool)
	list := []string{}
	for _, entry := range stringSlice {
		if _, value := keys[entry]; !value {
			keys[entry] = true
			list = append(list, entry)
		}
	}
	return list
}

func ShowAllPlatform(c *gin.Context) {

	var xploitdb []models.XploitDB

	count := models.DB.Select("platform").Find(&xploitdb)

	var platformVal []string

	if count.Error != nil {
		c.JSON(http.StatusBadRequest, gin.H{"Error": "Record not found!"})
		return
	}

	for i := 0; i < int(count.RowsAffected); i++ {
		platformVal = append(platformVal, xploitdb[i].Platform)
	}

	c.JSON(http.StatusOK, gin.H{"Total usable platform values": unique(platformVal)})
	c.String(200, "\n")

}

func ShowAllType(c *gin.Context) {

	var xploitdb []models.XploitDB

	count := models.DB.Select("type").Find(&xploitdb)

	var typeVal []string

	if count.Error != nil {
		c.JSON(http.StatusBadRequest, gin.H{"Error": "Record not found!"})
		return
	}

	for i := 0; i < int(count.RowsAffected); i++ {
		typeVal = append(typeVal, xploitdb[i].Type)
	}

	c.JSON(http.StatusOK, gin.H{"Total usable platform values": unique(typeVal)})
	c.String(200, "\n")
}

func SearchByPlatform(c *gin.Context) {
	var xploitdb []models.XploitDB

	count := models.DB.Where("platform LIKE ?", "%"+c.Param("platform")+"%").Find(&xploitdb)

	if count.Error != nil {
		c.JSON(http.StatusBadRequest, gin.H{"Error": "Record not found!"})
		return

	}

	for i := 0; i < int(count.RowsAffected); i++ {
		c.IndentedJSON(http.StatusOK, gin.H{"ID": xploitdb[i].ID, "TITLE": xploitdb[i].Title, "EDB-ID": xploitdb[i].EDBID, "CVE": xploitdb[i].CVE, "AUTHOR": xploitdb[i].Author, "TYPE": xploitdb[i].Type, "PLATFORM": xploitdb[i].Platform, "URL": xploitdb[i].URL})
		c.String(200, "\n")

	}
	c.JSON(http.StatusOK, gin.H{"Total Records": int(count.RowsAffected)})
	c.String(200, "\n")
}

func SearchByType(c *gin.Context) {

	fmt.Println(c.Param("type"))

	var xploitdb []models.XploitDB

	count := models.DB.Where("type LIKE ?", "%"+c.Param("type")+"%").Find(&xploitdb)

	if count.Error != nil {
		c.JSON(http.StatusBadRequest, gin.H{"Error": "Record not found!"})
		return

	}

	for i := 0; i < int(count.RowsAffected); i++ {
		c.IndentedJSON(http.StatusOK, gin.H{"ID": xploitdb[i].ID, "TITLE": xploitdb[i].Title, "EDB-ID": xploitdb[i].EDBID, "CVE": xploitdb[i].CVE, "AUTHOR": xploitdb[i].Author, "TYPE": xploitdb[i].Type, "PLATFORM": xploitdb[i].Platform, "URL": xploitdb[i].URL})
		c.String(200, "\n")

	}
	c.JSON(http.StatusOK, gin.H{"Total Records": int(count.RowsAffected)})
	c.String(200, "\n")
}

func SearchByCVE(c *gin.Context) {

	var xploitdb []models.XploitDB

	count := models.DB.Where("cve LIKE ?", "%"+c.Param("cve")+"%").Find(&xploitdb)

	if count.Error != nil {
		c.JSON(http.StatusBadRequest, gin.H{"Error": "Record not found!"})
		return

	}

	for i := 0; i < int(count.RowsAffected); i++ {
		c.IndentedJSON(http.StatusOK, gin.H{"ID": xploitdb[i].ID, "TITLE": xploitdb[i].Title, "EDB-ID": xploitdb[i].EDBID, "CVE": xploitdb[i].CVE, "AUTHOR": xploitdb[i].Author, "TYPE": xploitdb[i].Type, "PLATFORM": xploitdb[i].Platform, "URL": xploitdb[i].URL})
		c.String(200, "\n")

	}
	c.JSON(http.StatusOK, gin.H{"Total Records": int(count.RowsAffected)})
	c.String(200, "\n")

}
